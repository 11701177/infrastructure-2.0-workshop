Description: Networkstack with 3 public subnets 


Parameters:
  BaseNameParam:
    Type: String
    Default: "lab-cloudformation"
    Description: Base name for all resources
  PrefixCidrVPCParam:
      Type: String
      Default: "10.0"
      Description: Prefix of the VPC CidrBlock (eg. [X.Y].0.0/16)
  CidrPubSubAParam:
      Type: String
      Default: "1.0/24"
      Description: CidrBlock Tail of public subnet A (eg. 10.0.[X.Y/Z])
  CidrPubSubBParam:
      Type: String
      Default: "2.0/24"
      Description: CidrBlock Tail of public subnet B (eg. 10.0.[X.Y/Z])
  CidrPubSubCParam:
      Type: String
      Default: "3.0/24"
      Description: CidrBlock Tail of public subnet C (eg. 10.0.[X.Y/Z])

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required"
        Parameters:
          - BaseNameParam
          - PrefixCidrVPCParam
      - Label:
          default: "Optional"
        Parameters:
          - CidrPubSubAParam
          - CidrPubSubBParam
          - CidrPubSubCParam

Resources:

  # Define VPC

  infraVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Join [ ".", [ !Ref PrefixCidrVPCParam, "0.0/16" ] ]
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-NetworkingVPC"

  # RouteTables

    # Public

  routeTablePublicA:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref infraVPC
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-RouteTableA"
  routeTablePublicB:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref infraVPC
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-RouteTableB"
  routeTablePublicC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref infraVPC
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-RouteTableC"

  # InternetGateway

  infraInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-InternetGateway"
  infraGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref infraVPC
      InternetGatewayId: !Ref infraInternetGateway

  # EIP for NAT Gateway

  natEipA:
    Type: AWS::EC2::EIP
  natEipB:
    Type: AWS::EC2::EIP
  natEipC:
    Type: AWS::EC2::EIP

  # Subnets

    # Public

      # A

  subnetPublicA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref infraVPC
      AvailabilityZone: !Join [ '', [ !Ref "AWS::Region", "a" ] ]
      CidrBlock:  !Join [ ".", [ !Ref PrefixCidrVPCParam, !Ref CidrPubSubAParam ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-PublicSubnetA"
  publicRouteA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref infraInternetGateway
      RouteTableId: !Ref routeTablePublicA
  natGwA:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref subnetPublicA
      AllocationId: !GetAtt natEipA.AllocationId
  publicSubnetAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetPublicA
      RouteTableId: !Ref routeTablePublicA

      # B

  subnetPublicB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref infraVPC
      AvailabilityZone: !Join [ '', [ !Ref "AWS::Region", "b" ] ]
      CidrBlock:  !Join [ ".", [ !Ref PrefixCidrVPCParam, !Ref CidrPubSubBParam ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-PublicSubnetB"
  publicRouteB:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref infraInternetGateway
      RouteTableId: !Ref routeTablePublicB
  natGwB:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref subnetPublicB
      AllocationId: !GetAtt natEipB.AllocationId
  publicSubnetAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetPublicB
      RouteTableId: !Ref routeTablePublicB

      # C

  subnetPublicC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref infraVPC
      AvailabilityZone: !Join [ '', [ !Ref "AWS::Region", "c" ] ]
      CidrBlock:  !Join [ ".", [ !Ref PrefixCidrVPCParam, !Ref CidrPubSubCParam ] ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${BaseNameParam}-PublicSubnetC"
  publicRouteC:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref infraInternetGateway
      RouteTableId: !Ref routeTablePublicC
  natGwC:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref subnetPublicC
      AllocationId: !GetAtt natEipC.AllocationId
  publicSubnetAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref subnetPublicC
      RouteTableId: !Ref routeTablePublicC


Outputs:

  # Exports

    # VPC

  VpcId:
    Description: VPC Id
    Value: !Ref infraVPC
    Export:
      Name: !Sub "${BaseNameParam}-NetworkingVPC"

    # Public Subnets

  PublicSubnetIdA:
    Description: Public Subnet A Id
    Value: !Ref subnetPublicA
    Export:
      Name: !Sub "${BaseNameParam}-PublicSubnetA"
  PublicSubnetIdB:
    Description: Public Subnet B Id
    Value: !Ref subnetPublicB
    Export:
      Name: !Sub "${BaseNameParam}-PublicSubnetB"
  PublicSubnetIdC:
    Description: Public Subnet C Id
    Value: !Ref subnetPublicC
    Export:
      Name: !Sub "${BaseNameParam}-PublicSubnetC"

