Description: MemeGen application stack

Parameters:

  # Config Variables
  
  StudentIdParam:
    Type: String
    Default: "1"
    Description: Student Id of Name
    AllowedPattern: "[a-z0-9]+"
    ConstraintDescription: Value must be lowercase letters or numbers.
  KeyNameParam:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the AWS Elastic Beanstalk instance
    ConstraintDescription: Value must be the name of an existing EC2 KeyPair.
  AmiParam:
    Type: String
    #Default: "ami-82f4dae7" # US-EAST-2
    Default: "ami-8fd760f6" # EU-WEST-1
    Description: Ami Id to run the application.
  Ec2InstanceTypeParam:
    Type: String
    Default: "t2.micro"
    Description: InstanceType of the launched EC2 instance
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
  DomainNameParam:
    Type: String
    #Default: "gluo.io" # US-EAST-2
    Default: "gluo.cloud" # EU-WEST-1
    Description: Hostname to create Route53 subdomain
  VpcIdParam:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC
  PublicSubnetsParam:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Select the different public subnet IDs

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Required"
        Parameters:
          - StudentIdParam
          - KeyNameParam
          - AmiParam
          - Ec2InstanceTypeParam
          - DomainNameParam
          - VpcIdParam
          - PublicSubnetsParam

Resources:

  # DynamoDB table
  
  appDynamodbTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      TableName: !Sub "cloudformation-images-${StudentIdParam}"
      AttributeDefinitions: 
        - 
          AttributeName: "id"
          AttributeType: "N"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      Tags:
        - Key: "Name"
          Value: !Sub "cloudformation-images-${StudentIdParam}"

  # S3 bucket 

  appS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "cloudformation-images-bucket-${StudentIdParam}"
      VersioningConfiguration:
        Status: Suspended

  # Role and Profile

  appRole:
    # Needs permission to push: S3, CloudWatch
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "Cloudformation-${AWS::StackName}-Role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Sub "Cloudformation-${AWS::StackName}-Policies"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: 'S3BucketAccess'
                Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource: "*"
              - Sid: 'DynamoDBAccess'
                Effect: "Allow"
                Action:
                  - "dynamodb:*"
                Resource: "*"

  cfnInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref appRole

# ELB

  # SecurityGroup

  appElbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all/tcp out, http/tcp in"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcIdParam
      Tags: 
        - Key: Name
          Value: !Sub "CloudFormation-${AWS::StackName}-ElbSecurityGroup"

    # LoadBalancer

  appElb:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref appElbSecurityGroup
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: TCP
      Subnets: !Ref PublicSubnetsParam
      Tags: 
        - Key: Name
          Value: !Sub "CloudFormation-${AWS::StackName}-ElasticLoadBalancer"

  # Instance

    # Securitygroup

  appSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow all/tcp out and ssh/tcp, http/tcp in"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp 
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcIdParam
      Tags: 
        - Key: Name
          Value: !Sub "CloudFormation-${AWS::StackName}-AppSecurityGroup"

    # AutoscalingGroup

  appAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    # CreationPolicy is a 20 minute pause, waiting for a cfn-signal by the UserData of the Launch Configuration.
    # Meaning it does not continue unless the launch configuration of at least one of the instances has started.
    CreationPolicy:
      ResourceSignal:
        Count: "1"
        Timeout: 'PT20M'
    Properties:
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref appLaunchConfiguration
      LoadBalancerNames: 
      - Ref: "appElb"
      MinSize: "1"
      DesiredCapacity: "2"
      MaxSize: "3"
      Tags:
        - Key: Name
          Value: !Sub "CloudFormation-${AWS::StackName}-AutoscalingGroup"
          PropagateAtLaunch: 'true'
        - Key: Id
          Value: !Ref StudentIdParam
          PropagateAtLaunch: 'true'
      VPCZoneIdentifier: !Ref PublicSubnetsParam

    # App LaunchConfiguration

  appLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ConfigSetScript:
            - ExecuteScripts
        ExecuteScripts:
          files:
            "/root/InstallMemeGen-php-CF.sh":
              content: !Sub |
                #!/bin/bash
                # Installs MemeGen, modified to be used for cloudformation. 

                YOURID=$1
                REGION=$2

                # Set a settings for non interactive mode
                  export DEBIAN_FRONTEND=noninteractive
                  export PATH=$PATH:/usr/local/sbin/
                  export PATH=$PATH:/usr/sbin/
                  export PATH=$PATH:/sbin

                # Install packages (apache, mongo, php, python and other useful packages)
                  # Mongodb repo commands + apt refresh
                  apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5 && echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 multiverse" >> /etc/apt/sources.list.d/mongodb-org-3.6.list;
                  apt-get update -y;
                  # Install all
                  apt-get install -y apache2 mongodb-org mongodb-org-server php7.0 php7.0-dev libapache2-mod-php7.0 php-pear pkg-config libssl-dev libsslcommon2-dev python-minimal python-pip imagemagick composer wget unzip;
                  # Mongodb config
                  pecl install mongodb
                  echo "extension=mongodb.so" >> /etc/php/7.0/apache2/php.ini && echo "extension=mongodb.so" >> /etc/php/7.0/cli/php.ini

                # Pip install meme creation packages and awscli for syncing s3 to local fs
                  pip install --upgrade pip
                  pip install wand awscli
                  
                # Enable and start services  
                  # Enable
                  systemctl enable mongod apache2
                  # Start
                  systemctl start mongod apache2
                  # Wait for mongod start
                  until nc -z localhost 27017
                  do
                      echo 'Sleep till MongoDB is running.' | systemd-cat
                      sleep 2
                  done

                # Configure Mongodb
                  # Create mongo student root user for memegen db
                  echo '
                    use memegen
                    db.createUser(
                       {
                         user: "student",
                         pwd: "Cloud247",
                         roles: [ { role: "root", db: "admin" } ]
                       }
                    )
                  ' | mongo
                  # Enable user credentials security
                  echo "security:" >> /etc/mongod.conf && echo "  authorization: enabled" >> /etc/mongod.conf
                  # Restart the mongodb service
                  systemctl restart mongod
                    
                # Download and install MemeGen
                  # Git clone the repository in your home directory
                  git clone https://github.com/gluobe/infrastructure-2.0-workshop.git ~/infra-workshop
                  # Clone the application out of the repo to the web folder.
                  mv ~/infra-workshop/Application/memegen-php/* /var/www/html/
                  # Set permissions for apache
                  chown -R www-data:www-data /var/www/html/meme-generator/
                  
                # Install aws sdk for DynamoDB
                  until [ -f /var/www/html/vendor/autoload.php ]
                  do
                      echo 'Sleep till Composer has been run.' | systemd-cat
                      export HOME=/root
                      export COMPOSER_HOME=/var/www/html
                      composer -d="/var/www/html" require aws/aws-sdk-php
                      sleep 2
                  done
                  
                # Configure httpd and restart
                  # Remove index.html
                  rm -f /var/www/html/index.html
                  # Restart httpd
                  systemctl restart apache2
                  
                # Edit site's config.php file
                  # Put remote on.
                  sed -i 's@^$remoteData.*@$remoteData = true; # DynamoDB (Altered by sed)@g' /var/www/html/config.php
                  sed -i 's@^$remoteFiles.*@$remoteFiles = true; # S3 (Altered by sed)@g' /var/www/html/config.php
                  
                  # Alter user id
                  sed -i "s@^\$yourId.*@\$yourId = \"$YOURID\"; # (Altered by sed)@g" /var/www/html/config.php
                  sed -i "s@^\$awsRegion.*@\$awsRegion = \"$REGION\"; # (Altered by sed)@g" /var/www/html/config.php
                  sed -i "s@^\$dynamoDBTable.*@\$dynamoDBTable = \"cloudformation-images-\$yourId\"; # (Altered by sed)@g" /var/www/html/config.php
                  sed -i "s@^\$s3Bucket.*@\$s3Bucket = \"cloudformation-images-bucket-\$yourId\"; # (Altered by sed)@g" /var/www/html/config.php

                # Please go to http://
                  echo -e "Automatic MemeGen installation complete."
                  echo 'Automatic MemeGen installation complete.' | systemd-cat
              mode: '000755'
              owner: root
              group: root
          commands:
            01_installMEMEGEN:
              command: "/root/InstallMemeGen-php-CF.sh \"$ID\" \"$REGION\""
              env:
                ID: !Ref StudentIdParam
                REGION: !Ref "AWS::Region"
              cwd: "~"
    Properties:
      IamInstanceProfile: !GetAtt cfnInstanceProfile.Arn
      AssociatePublicIpAddress: true
      ImageId: !Ref AmiParam
      InstanceMonitoring: true
      InstanceType: !Ref Ec2InstanceTypeParam
      KeyName: !Ref KeyNameParam
      SecurityGroups:
      - !Ref appSecuritygroup
      UserData:  
        Fn::Base64: !Sub |
          #!/bin/bash -xe

          # Update and install pip and cfn-... commands to trigger asg wait and start executing scripts
          apt-get -y update && apt-get -y install python-pip && pip install --upgrade pip && pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          
          # Start executing scripts defined above
          /usr/local/bin/cfn-init -v \
            --stack ${AWS::StackName} \
            --resource appLaunchConfiguration \
            --configsets ConfigSetScript \
            --region ${AWS::Region}
          
          # Signal ASG to continue only when error signal is 0
          /usr/local/bin/cfn-signal -e $? \
            --stack ${AWS::StackName} \
            --resource appAutoscalingGroup \
            --region ${AWS::Region}
      
  # Route 53 Record
      
  appRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainNameParam}."
      Name: !Sub "${AWS::StackName}.${DomainNameParam}."
      Type: CNAME
      TTL: '300'
      ResourceRecords:
      - !GetAtt appElb.DNSName
        
Outputs:
  ElbDnsNameExport:
    Description: Export of the Elb endpoint
    Value: !GetAtt appElb.DNSName
    Export:
      Name: !Sub "CloudFormation-${AWS::StackName}-ElbDnsUrl"
  Route53NameExport:
    Description: Export of the Route53 endpoint pointed to the load balancer
    Value: !Sub "${AWS::StackName}.${DomainNameParam}"
    Export:
      Name: !Sub "CloudFormation-${AWS::StackName}-Route53DnsUrl"
  S3BucketExport:
    Description: Export of the name of the created S3 bucket
    Value: !Ref appS3Bucket
    Export:
      Name: !Sub "CloudFormation-${AWS::StackName}-BucketName"
      
